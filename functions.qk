/*
Quark Function Documentation (*.qk):

Functions look just like they do in SV for the most part, but with the notable
exception that you can parameterize functions.
*/

// You write a function like this
def add(Bit[8] a, b): Bit[8] {
    return a + b; // You just return like normal
}

// Functions can have multiple returns (woooooowwww)
def add(Bit[8] a, b): (Bit[8], Bit[8]) {
    return a + b, b - a; // You just return like normal
}

// Those returns can be named
def add(Bit[8] a, b): (Bit[8] x, Bit[8] y) {
    return a + b, b - a; // You just return like normal
}

// Those returns can be named
def add(Bit[8] a, b): (Bit[8] x, Bit[8] y) {
    return {
        x = a + b, 
        y = b - a
    }
}

//TODO: ADD Size type
//TODO: Type naming - types CamelCase, values camelCase, params SNAKE_CASE
// You can also parameterize a function
function add [Size w](bit [w] a, b): Bit[W] {
    return a + b;
}

function add[w](bit [w] a, b): Bit[W] {
    return a + b;
}



def myFunc[Int I, Size S, W](): Bit[W], Bit[32]{
    
}

// Any fields passed to the struct are completely "copied" so that modifications
// in the scope of the function are not reflected in the outside scope

struct add_t {
    bit [8] a, b, c;
}

function bit [8] add(add_t add) {
    add.c = add.a + add.b;
    return add.c;
}

add_t my_add = {a: 'h1, b: 'h2, c: 'h0};
bit [8] result = add(my_add); // my_add.c is still 'h0


// If you want a function to use a parameterized struct, you can use the struct
// parameters directly, so long as they don't conflict with already named
// parameters of the function.

// This allows functions to be parameterized based on structs without confusing
// them as being member functions, since they lack access to the struct scope

struct param_struct_t [bit [32] W] {
    bit [W] a;
}

function bit [W] implicit_params_func(param_struct_t[W] p) {
    return p.a;
}

// You can also setup a function to return an implicitly created struct
function {bit [32] a, b} mix(bit [32] a, b) {
    return {a: b, b: a};
}

bit [32] a, b;
{a: a, b: b} = mix(a, b); // You can use named left-hand expressions
a, b = mix(a, b); // You can use unnamed left-hand expressions

// You can pass the result to another function or module, but it will use name
// matching between the implicit struct and the arguments, not their order
a, b = mix(mix(a, b));
