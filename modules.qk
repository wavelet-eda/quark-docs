/*
Quark Module Documentation (*.qk):

Modules are smallest form of logic that can be constructed as the top level of a
design. Modules can be connected together through a variety of methods, but a
module should really be thought of as a hardware thread.

For instance, instead of having blocks like always_comb and assign statements,
the entire module is single linear control flow. You can also instantiate
modules inside of other modules but "calling a module" works a little different
than it does in either SV or just calling a state-less function.

Warnings are issued if a future assignment is used in a module using other
modules that do not have all of their outputs registered.
*/

module my_simple_module [
    bit [32] WIDTH, // Must be given as a parameter (you don't need param first)
    // You can declare a derived parameter as a constant that cannot be passed
    // in but can be assigned by internal logic
    const bit [32] WIDTH_HALF = WIDTH / 2,
    // You can define a default parameter that does not have to be passed in,
    // but any default parameter requires that all parameters be passed in
    // with labels
    bit [WIDTH_HALF] HEIGHT = 32, // Trailing comma lol
] {

    // You can also create parameter variables in the body of the module
    // but they need to be labeled explicitly so they aren't confused for
    // signals. The compiler could work it out without this, but it becomes
    // a lot less readable if the labels aren't forced to be there.
    param fixed bit [32] ADDR_WIDTH = clog2(WIDTH);

    // Inputs and outputs can be mixed
    input bit [WIDTH] a, b;
    output bit [WIDTH] c;

    c = a + b; // Just do the assignment right here
}

// You can also call one module inside of another module, just like a function
// but you need to use a new keyword since this technically creates new state
// (to be explained later)
module my_nested_module [
    bit [32] WIDTH
] {
    input bit [WIDTH] a, b, c, d;
    output bit [WIDTH] e;

    // All variables default to zero (you cannot infer a latch)
    bit [WIDTH] temp1, temp2;
    temp1 = new my_simple_module [WIDTH] (a, b);
    temp2 = new my_simple_module [WIDTH] (c, d);
    e = new my_simple_module [WIDTH] (temp1, temp2);
}

// You can list out the module parameters ahead of time and use the module
// multiple times as well
module my_nested_module_typedef [bit [32] WIDTH] {
    input bit [WIDTH] a, b, c, d;
    output bit [WIDTH] e;

    bit [WIDTH] temp1, temp2;
    
    typedef my_simple_module [WIDTH] my_parameterized_module;

    // We got the parameters out of the way
    temp1 = new my_parameterized_module(a, b);
    temp2 = new my_parameterized_module(c, d);
    e = new my_parameterized_module(temp1, temp2);
}

// While the unnamed passing style is normal and generally acceptable for
// functions, it becomes incredibly error-prone when you have a lot of values
// For this reason, named port assignments just like SV are supported
module my_nested_explicit_module [
    bit [32] WIDTH
] {
    input bit [WIDTH] a, b, c, d;
    output bit [WIDTH] e;

    bit [WIDTH] temp1, temp2;

    // You can pass everything labeled as well as left-hand expressions 
    {c: temp1} = new my_simple_module [WIDTH: WIDTH] (a: a, b: b);
    {c: temp2} = new my_simple_module [WIDTH: WIDTH] (a: c, b: d);
    
    // Of note here is that these modules are still like function calls, as in 
    // their ordering matters. If you called the module doing a + b after the
    // module doing temp1 + temp2 then you will have different behavior
    {c: e} = new my_simple_module [WIDTH: WIDTH] (a: temp1, b: temp2);
}

// The collection of inputs or outputs that make up a module also form an
// implicitly defined type and can be used inline in code
module my_typed_module2 (
    param bit [32] WIDTH,
    input bit [WIDTH] a, b, c, d,
    output bit [WIDTH] e,
) {
    bit [WIDTH] temp1, temp2;
    
    // Parameter name matching works the same inside <> as ()
    typedef my_simple_module [WIDTH] my_parameterized_module;

    // Left hand assignment syntax, with explict struct naming
    input[my_parameterized_module] temp_inputs = {a: a, b: b};
    output[my_parameterized_module] temp_outputs1, temp_outputs2;

    temp_outputs1 = new my_parameterized_module(temp_inputs);

    temp_inputs = {a: c, b: d};
    temp_outputs2 = new my_parameterized_module(temp_inputs);

    // You can also pass the parameters with the signals
    temp_inputs = {a: temp_outputs1.c, b: temp_outputs2.c};
    e = new my_simple_module [WIDTH] (temp_inputs);
}

// Before explaining how stateful elements like registers or latches work,
// clock and reset signals need to be explained first. These signals are single
// bit signals that make use of of the clock and reset keywords. For instance
// you write the following in a module, as one of the inputs or outputs of the 
// module, or as one of the inputs/outputs of an interface.

// Just normal signals in a module
clock clk; // You don't need to type 'bit' and it is invalid to add it
reset rst;

// Ports
input clock clk;
output reset rst;

// Of particular note, you cannot use clock and reset as types in functions,
// structs, or enums, since they really only belong in the stateful logic
// of a module.

// When you use a clock or reset wire at a register or latch you do not manually
// declare the clock edge or reset polarity. That is instead an attribute of the
// clock or reset signal. If the clock or reset is used at the top level then
// the edge/polarity is the responsibility of the simulator or synthesis
// environment to define, but if you want to derive the clock or reset signal
// from an existing signal then you can use the clock or reset keywords as well.

bit test; // Some random signal bit, could be pulled from anywhere

clock clk = clock(test, "rising"); // Makes a rising edge clock
reset rst = reset(test, "low"); // Makes an active-low reset
reset rst_a = reset(test, "high", "async"); // Makes an active-high, async reset

// Any clock or reset cannot be used as a normal signal until it is converted
// back with the 'signal' keyword

bit a = signal(rst_a);

// Actually adding registers to a module is done by using the 'reg' keyword in
// front of another type
module my_state_module [bit [32] WIDTH] {
    input clock clk;
    input reset rst;
    input bit [WIDTH] a, b;
    output bit [WIDTH] c;

    // Explicitly define the reset value (how you create set/reset behavior),
    // but you have to set it to a constant, not another signal in the module
    reg bit state_reg_default(clk, rst, 'b1);
    reg bit state_reg(clk, rst); // Reset defaults to zero
    reg bit value_reg(clk); // Optional reset
    c = a + b;

    value_reg = c[0]; // Just do the assignment right here
}

// If you have a struct where you want to mix clocks and resets amongst
// different fields of a struct you can define that as well
struct my_struct_t {
    bit [8] state;
    bit [8] my_value;
    bit [8] stuff;
}

module my_state_struct_module [bit [32] WIDTH] {
    
    input clock clk;
    input reset rst;
    input bit [WIDTH] a, b;
    output bit [WIDTH] c;

    // Resets the struct to all zeros
    reg my_struct_t my_struct(clk, rst);

    // You can label the fields specifically for their default values
    // This example resets 'state' and 'stuff' specifically but does not reset
    // 'my_value'. Because of this approach you cannot divide a single register
    // between different clocks (that is a horrific idea).
    reg my_struct_t my_struct_specific(clk, rst, {state: 'h0, stuff: 'h1});

    my_struct_specific.state = a;
    my_struct_specific.value = b;

    c = a + b;
}

// You can also define outputs as registers too
module my_incr_module [bit [32] WIDTH] {
    
    input clock clk;
    input reset rst;
    input bit [WIDTH] a;
    output reg bit [WIDTH] b(clk, rst);
    output reg bit [WIDTH] c(clk, rst);

    b = a + 'b1;
    // Retrieving the value of any register results in the current value of the
    // register, not the newly assigned value from the previous line. This
    // enforces the behavior of registers while also preventing the need for
    // multiple different kind of assignment operators
    c = b + 'b1;
}

// See updated future syntax in control_flow.qk
