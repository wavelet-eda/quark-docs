/*
Quark Operator Documentation (*.qk):

Unless otherwise qualified, operators in quark are identical to those 
supported in SV

Table 11-1 in SystemVerilog standard is otherwise a good reference
Reference: http://ecee.colorado.edu/~mathys/ecen2350/IntelSoftware/pdf/IEEE_Std1800-2017_8299595.pdf

TODO: I want to consider modifications to streaming operators
Reference: https://www.amiq.com/consulting/2017/05/29/how-to-pack-data-using-systemverilog-streaming-operators/

Raw Operator Table (https://ozh.github.io/ascii-tables/):

Op. Name    Assign  Unary   Input   Output  Unary Output    Assignment Restrictions Comments
+   Addition    +=  Yes bit[N]  bit[N(+1)]  bit[clog2(N)+1] Either  Note 1 
-   Subtraction -=  Yes bit[N]  bit[N(+1)]  bit[N(+1)]  Either  Note 1
*   Multiplication  *=      bit[N1],bit[N2] bit[N1+N2]???       Signed if Operand(s) are    Note 2
/   Division    /=      bit[N1],bit[N2] bit[N1]???      Signed if Operand(s) are    Note 2
%   Modulus %=      bit[N1],bit[N2] bit[N1]???      Either  Note 2
&   Bitwise AND &=  Yes bit[N]  bit[N]  bit[1]  Either
~&  Bitwise NAND        Yes bit[N]  bit[N]  bit[1]  Either
|   Bitwise OR  |=  Yes bit[N]  bit[N]  bit[1]  Either
~|  Bitwise NOR     Yes bit[N]  bit[N]  bit[1]  Either
^   Bitwise XOR ^=  Yes bit[N]  bit[N]  bit[1]  Either
~^  Bitwise XNOR        Yes bit[N]  bit[N]  bit[1]  Either
<<  Logical Left Shift  <<=     bit[N],bit[clog2(N)]    bit[N]      Either  Note 3
>>  Logical Right Shift >>=     bit[N],bit[clog2(N)]    bit[N]      Either  Note 3
<<< Arithmetic Left Shift   <<<=        bit[N],bit[clog2(N)]    bit[N]      Signed  Note 3
>>> Arithmetic Right Shift  >>>=        bit[N],bit[clog2(N)]    bit[N]      Signed  Note 3
&&  Conditional AND         bit[N1],bit[N2] bit[1]          Note 5
||  Conditional OR          bit[N1],bit[N2] bit[1]          Note 5
->  Conditional IMPLICATION         bit[N1],bit[N2] bit[1]          Note 5
<-> Conditional EQUIVALENCE         bit[N1],bit[N2] bit[1]          Note 5
<   Less Than           bit[N1],bit[N2] bit[1]          Note 4
>   Greater Than            bit[N1],bit[N2] bit[1]          Note 4
<=      Less Than or Eq.            bit[N1],bit[N2] bit[1]          Note 4
>=  Greater Than or Eq.         bit[N1],bit[N2] bit[1]          Note 4
==  Equal           bit[N]  bit[1]
!=  Not Equal           bit[N]  bit[1]
++  Increment       Only    bit[N]      bit[N(+1)]  Either  Note 1
--  Decrement       Only    bit[N]      bit[N(+1)]  Either  Note 1

Formatted Operator Table:

+------+-------------------------+--------+-------+----------------------+---------------+-----------------+--------------------------+----------+
| Op.  |          Name           | Assign | Unary |        Input         |    Output     |  Unary Output   | Assignment Restrictions  | Comments |
+------+-------------------------+--------+-------+----------------------+---------------+-----------------+--------------------------+----------+
| +    | Addition                | +=     | Yes   | bit[N]               | bit[N(+1)]    | bit[clog2(N)+1] | Either                   | Note 1   |
| -    | Subtraction             | -=     | Yes   | bit[N]               | bit[N(+1)]    | bit[N(+1)]      | Either                   | Note 1   |
| *    | Multiplication          | *=     |       | bit[N1],bit[N2]      | bit[N1+N2]??? |                 | Signed if Operand(s) are | Note 2   |
| /    | Division                | /=     |       | bit[N1],bit[N2]      | bit[N1]???    |                 | Signed if Operand(s) are | Note 2   |
| %    | Modulus                 | %=     |       | bit[N1],bit[N2]      | bit[N1]???    |                 | Either                   | Note 2   |
| &    | Bitwise AND             | &=     | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| ~&   | Bitwise NAND            |        | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| |    | Bitwise OR              | |=     | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| ~|   | Bitwise NOR             |        | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| ^    | Bitwise XOR             | ^=     | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| ~^   | Bitwise XNOR            |        | Yes   | bit[N]               | bit[N]        | bit[1]          | Either                   |          |
| <<   | Logical Left Shift      | <<=    |       | bit[N],bit[clog2(N)] | bit[N]        |                 | Either                   | Note 3   |
| >>   | Logical Right Shift     | >>=    |       | bit[N],bit[clog2(N)] | bit[N]        |                 | Either                   | Note 3   |
| <<<  | Arithmetic Left Shift   | <<<=   |       | bit[N],bit[clog2(N)] | bit[N]        |                 | Signed                   | Note 3   |
| >>>  | Arithmetic Right Shift  | >>>=   |       | bit[N],bit[clog2(N)] | bit[N]        |                 | Signed                   | Note 3   |
| &&   | Conditional AND         |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 5   |
| ||   | Conditional OR          |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 5   |
| ->   | Conditional IMPLICATION |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 5   |
| <->  | Conditional EQUIVALENCE |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 5   |
| <    | Less Than               |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 4   |
| >    | Greater Than            |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 4   |
| <=   | Less Than or Eq.        |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 4   |
| >=   | Greater Than or Eq.     |        |       | bit[N1],bit[N2]      | bit[1]        |                 |                          | Note 4   |
| ==   | Equal                   |        |       | bit[N]               | bit[1]        |                 |                          |          |
| !=   | Not Equal               |        |       | bit[N]               | bit[1]        |                 |                          |          |
| ++   | Increment               |        | Only  | bit[N]               |               | bit[N(+1)]      | Either                   | Note 1   |
| --   | Decrement               |        | Only  | bit[N]               |               | bit[N(+1)]      | Either                   | Note 1   |
+------+-------------------------+--------+-------+----------------------+---------------+-----------------+--------------------------+----------+

Note 1: 
    Since addition and subtraction produce an extra bit, they can be assigned
    to either a variable of the same width or a width one greater without
    being explicitly resized. These operators will work on signed and
    unsigned numbers, and can be assigned to any signed or unsigned number,
    since binary addition and subtraction hardware is invariant under
    twos-complement or an unsigned number system. The widths of the two
    operands must match, except for adding a single bit to any other value,
    which is a common and acceptable operation for handling carry bits.
Note 2:
    Multiplication, division, and modulus are already complex hardware
    operations that you might not want to directly infer, but if you choose
    to do this then the operators will impose restrictions on the destination
    variable. If either of the operands is signed then the destination must
    be signed for multiplication and division.
Note 3:
    Unlike SV, a single shift operator is provided, and the sign extension
    behavior is solely dependent on whether the operand is signed or not.
    Also a warning is given if the operand being shifted does not have a
    power of 2 width.
Note 4:
    Relational Operators do not require the bit-vectors they are comparing to
    match, including different widths and signed-ness. Bit-vectors are mapped
    to an absolute number line based on their signed-ness and then simply
    compared as numbers, not their individual bits. Keep in mind that while
    comparisons between signed and unsigned bit-vectors are mathematically
    correct, they may require some (slight) hardware overhead potentially.
Note 5:
    Conditional operations on different bit-widths are handled by first
    performing a unary reduction OR operation on both operands before the
    conditional operation is performed on single bit vectors.
*/

// = // Binary assignment operator
// ?: // Conditional operator Any
// {} {{}} // Concatenation, replication operators Integral
// {<<{}} {>>{}} // Stream operators Integral 

bit [8] unsigned_value;
signed bit [8] signed_value;

// Literals must have a matching sign and width to their destination
unsigned_value = 8'h00; // Both value width and sign match
signed_value = 8'sh01; // Both value width and sign match

// You can give an unsigned constant an ambiguous width, but it does have a
// minimum width, i.e. you cannot operate on it with something of a smaller
// width. If operated on with a value of fixed but >= width the result takes
// on the other operand width and the ambiguous value is zero extended.
// If it is operated on with another ambiguous constant it takes on the
// greater width and the smaller one is zero-extended
unsigned_value = 'h0;
unsigned_value = 0; // You can ditch the radix, decimal is the default

// You cannot give a signed constant an ambiguous width since sign-extension
// is a little bit ambiguous there
// signed_value = 'sh00;

// You can arbitrarily bit-slice into bit vectors and arrays just like in SV
bit [32] data = 'hfefe;
bit [16] data_msb = data[31:16];
bit [16] data_lsb = data[15:0];
bit [32] data_2x = (data + data)[31:0]; // You can bit-slice results mid-op

// Regardless of the sign of the arguments, the result of a slice is going to 
// be an unsigned, unsafe bit vector
signed bit [32] signed_stuff;
bit [16] sliced_stuff = signed_stuff[15:0];

// You get a variety of keyworded native functions to work with as well
bit [21] width_length_example [12] [13];

bit [32] width_val = width(bit [21]); // Types are accepted here too
         width_val = width(width_length_example);

bit [32] length_val = length(bit [21]:[13]); // Array type notation (see types)
         length_val = length(width_length_example);

// Signed and unsigned conversions are available

// Argument must be signed, destination must be unsigned, widths must match
unsigned_value = unsigned(signed_value);

// Argument must be unsigned, destination must be signed, widths must match
signed_value = signed(unsigned_value);

// Signed and unsigned values can be extended as well
bit [13] unsigned_value_big;
signed bit [13] signed_value_big;

// Changes value to unsigned and zero extends to 13 bits
unsigned_value_big = unsigned(signed_value, 13);

// Changes value to signed and sign extends to 13 bits
signed_value_big = signed(unsigned_value, 13);

// Extends same signed-ness argument to same signed-ness destination, you can
// also use resize to reduce the width as well.
unsigned_value_big = resize(unsigned_value, 13); // Zero-extends
signed_value_big = resize(signed_value, 13); // Sign-extends

// ----------- Addition/Subtraction on Unsafe Bit-Vectors -----------

/*
There are four different kinds of intermediate operation meta-types:

1. Fixed width results come from binary operations or base types
2. Ambiguous width results come from ambiguous constants or 

*/

bit [4] a = 'd10;
bit [4] b = 'd5;
bit c = 'd1;

// 

// You can also use a set of overflow/underflow functions for unsigned values
bit [4] test1 = 'd15;
bit [4] test2 = 'd15;

bit u = overflow(); // Idk about this one rn

// ----------- Assignments -----------

// Normal variable assignments work like you would expect

bit [4] a = 'd10;
bit [4] b = 'd11;

bit [5] a = a + b;

// You can append bit-vectors just like in SV
bit [8] d = {a, b}; // a is the msb

// Repeated extensions work the same way
bit [16] e = {4{a}}; // The 4 can be any parameter expression

// Repeated expressions can list multiple repititions though
bit [32] f = {4{a}, 4{b}};

// Arrays can be assigned to with array literal syntax
bit g [4] = ['b1, 'b1, 'b1, 'b0];

// Arrays cannot be concatenated using literal syntax, since this just creates
// a higher dimension array
bit h [4] [4] = [g, g, g, g]; // Creates 2D array

// You can instead use the concat function
bit concat_g [12] = concat(g, g, g);

// Or the second argument can be a parameter and it will repeat the array
bit repeat_g [12] = concat(g, 3);

// Unlike most C-like languages you can build an expression on the left-side
// of the equal sign using concatentation
{a, b} = 8'hffff; // You can use bit-vector concatenation but not repitition

// You can use type definitions syntax to ignore some bits
{a, bit [4]} = 8'hffff; // Equivalent to a[3:0] = (8'hffff)[7:4]

// You can also assign to an array of variables for unpacking small arrays
[a, b] = [4'h00, 4'hff]; // You cannot use concat ent

